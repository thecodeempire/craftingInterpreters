/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package interpreter;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

public class App {
    static boolean hadError = false;
    static boolean hadRuntimeError = false;

    private static final Interpreter interpreter = new Interpreter();

    public String getGreeting() {
        return "Hello World";
    }

    public static void main(final String[] args) throws IOException {
        if (args.length > 1) {
            System.out.println("Usage: jlox [script]");
            System.exit(64);
        } else if (args.length == 1) {
            runFile(args[0]);
        } else {
            runPrompt();
        }
    }

    private static void runPrompt() {
        final InputStreamReader input = new InputStreamReader(System.in);
        final BufferedReader reader = new BufferedReader(input);

        while (true) {
            System.out.print("> ");
            String line;
            try {
                line = reader.readLine();
                if (line == null)
                    break;
                run(line);
                hadError = false;
            } catch (final IOException e) {
                e.printStackTrace();
            }
        }
    }

    private static void runFile(final String path) throws IOException {
        final byte[] bytes = Files.readAllBytes(Paths.get(path));
        run(new String(bytes, Charset.defaultCharset()));
        if (hadError)
            System.exit(65);
        if (hadRuntimeError)
            System.exit(70);
    }

    private static void run(final String source) {
        // This is where the interpreter starts
        final Scanner scanner = new Scanner(source);
        final List<Token> tokens = scanner.scanTokens();

        // for (Token token : tokens) {
        // System.out.println(token);
        // }

        final Parser parser = new Parser(tokens);
        final List<Stmt> expression = parser.parse();

        // Stop if there was a syntax error
        if (hadError)
            return;

        interpreter.interpret(expression);
    }

    static void runtimeError(final RuntimeError error) {
        System.err.println(error.getMessage() + "\n[line " + error.token.line + "]");
        hadRuntimeError = true;
    }

    static void error(final Token token, final String message) {
        if (token.type == TokenType.EOF) {
            report(token.line, " at end ", message);
        } else {
            report(token.line, " at '" + token.lexeme + "'", message);
        }
    }

    private static void report(final int line, final String where, final String message) {
        System.err.println("[line " + line + "] Error" + where + ": " + message);
        hadError = true;
    }
}
